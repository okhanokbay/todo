//
//  TaskListModels.swift
//  todo
//
//  Created by Okhan Okbay on 7.11.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

// MARK: Use cases

enum TaskList {
  struct TaskCellViewModel: ItemCellViewModelable {
    var labelText: String
    
    init(task: TaskObject) {
      labelText = task.taskDescription
    }
  }
  
  // MARK: Initialization
  
  enum TaskInitialization {
    class Request {}
    
    struct Response {
      let tasks: [TaskObject]
    }
    
    struct ViewModel {
      let cellViewModels: [TaskCellViewModel]
      
      init(response: Response) {
        cellViewModels = response.tasks.map(TaskCellViewModel.init)
      }
    }
  }
  
  typealias FetchTasks = TaskInitialization
  
  enum DeleteTask {
    class Request: TaskInitialization.Request {
      let index: Int
      
      init(index: Int) {
        self.index = index
        super.init()
      }
    }
    
    typealias Response = TaskInitialization.Response
    typealias ViewModel = TaskInitialization.ViewModel
  }
  
  // MARK: Operations
  
  enum TaskOperation {
    class Request {}
    
    class Response {
      let handler: TextHandler
      
      init(handler: @escaping TextHandler) {
        self.handler = handler
      }
    }
    
    class ViewModel {
      let handler: (String?) -> Void
      
      init(response: Response) {
        handler = response.handler
      }
    }
  }
  
  typealias AddNewTask = TaskOperation
  
  enum EditTask {
    class Request: TaskOperation.Request {
      let index: Int
      
      init(index: Int) {
        self.index = index
      }
    }
    
    class Response: TaskOperation.Response {
      let initialText: String
      
      init(initialText: String, handler: @escaping TextHandler) {
        self.initialText = initialText
        super.init(handler: handler)
      }
    }
    
    class ViewModel: TaskOperation.ViewModel {
      let initialText: String
      
      init(response: Response) {
        initialText = response.initialText
        super.init(response: response)
      }
    }
  }
}

